package io.flutter.plugins;// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class LibertyEmv {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum AccountType {
    DEFAULT_UNSPECIFIED(0),
    SAVINGS(1),
    CURRENT(2),
    CREDIT(3),
    UNIVERSAL(4),
    INVESTMENT(5);

    final int index;

    private AccountType(final int index) {
      this.index = index;
    }
  }

  public enum Environment {
    LIVE(0),
    TEST(1);

    final int index;

    private Environment(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionDataResponse {
    private @Nullable String amount;

    public @Nullable String getAmount() {
      return amount;
    }

    public void setAmount(@Nullable String setterArg) {
      this.amount = setterArg;
    }

    private @Nullable String deviceState;

    public @Nullable String getDeviceState() {
      return deviceState;
    }

    public void setDeviceState(@Nullable String setterArg) {
      this.deviceState = setterArg;
    }

    private @Nullable String authorizationCode;

    public @Nullable String getAuthorizationCode() {
      return authorizationCode;
    }

    public void setAuthorizationCode(@Nullable String setterArg) {
      this.authorizationCode = setterArg;
    }

    private @Nullable String cardExpiryDate;

    public @Nullable String getCardExpiryDate() {
      return cardExpiryDate;
    }

    public void setCardExpiryDate(@Nullable String setterArg) {
      this.cardExpiryDate = setterArg;
    }

    private @Nullable String cardHolderName;

    public @Nullable String getCardHolderName() {
      return cardHolderName;
    }

    public void setCardHolderName(@Nullable String setterArg) {
      this.cardHolderName = setterArg;
    }

    private @Nullable String date;

    public @Nullable String getDate() {
      return date;
    }

    public void setDate(@Nullable String setterArg) {
      this.date = setterArg;
    }

    private @Nullable String maskedPan;

    public @Nullable String getMaskedPan() {
      return maskedPan;
    }

    public void setMaskedPan(@Nullable String setterArg) {
      this.maskedPan = setterArg;
    }

    private @Nullable String merchantId;

    public @Nullable String getMerchantId() {
      return merchantId;
    }

    public void setMerchantId(@Nullable String setterArg) {
      this.merchantId = setterArg;
    }

    private @Nullable String merchantName;

    public @Nullable String getMerchantName() {
      return merchantName;
    }

    public void setMerchantName(@Nullable String setterArg) {
      this.merchantName = setterArg;
    }

    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String rrn;

    public @Nullable String getRrn() {
      return rrn;
    }

    public void setRrn(@Nullable String setterArg) {
      this.rrn = setterArg;
    }

    private @Nullable String stan;

    public @Nullable String getStan() {
      return stan;
    }

    public void setStan(@Nullable String setterArg) {
      this.stan = setterArg;
    }

    private @Nullable String terminalId;

    public @Nullable String getTerminalId() {
      return terminalId;
    }

    public void setTerminalId(@Nullable String setterArg) {
      this.terminalId = setterArg;
    }

    private @Nullable String transactionType;

    public @Nullable String getTransactionType() {
      return transactionType;
    }

    public void setTransactionType(@Nullable String setterArg) {
      this.transactionType = setterArg;
    }

    private @Nullable Boolean isSuccessful;

    public @Nullable Boolean getIsSuccessful() {
      return isSuccessful;
    }

    public void setIsSuccessful(@Nullable Boolean setterArg) {
      this.isSuccessful = setterArg;
    }

    public static final class Builder {

      private @Nullable String amount;

      public @NonNull Builder setAmount(@Nullable String setterArg) {
        this.amount = setterArg;
        return this;
      }

      private @Nullable String deviceState;

      public @NonNull Builder setDeviceState(@Nullable String setterArg) {
        this.deviceState = setterArg;
        return this;
      }

      private @Nullable String authorizationCode;

      public @NonNull Builder setAuthorizationCode(@Nullable String setterArg) {
        this.authorizationCode = setterArg;
        return this;
      }

      private @Nullable String cardExpiryDate;

      public @NonNull Builder setCardExpiryDate(@Nullable String setterArg) {
        this.cardExpiryDate = setterArg;
        return this;
      }

      private @Nullable String cardHolderName;

      public @NonNull Builder setCardHolderName(@Nullable String setterArg) {
        this.cardHolderName = setterArg;
        return this;
      }

      private @Nullable String date;

      public @NonNull Builder setDate(@Nullable String setterArg) {
        this.date = setterArg;
        return this;
      }

      private @Nullable String maskedPan;

      public @NonNull Builder setMaskedPan(@Nullable String setterArg) {
        this.maskedPan = setterArg;
        return this;
      }

      private @Nullable String merchantId;

      public @NonNull Builder setMerchantId(@Nullable String setterArg) {
        this.merchantId = setterArg;
        return this;
      }

      private @Nullable String merchantName;

      public @NonNull Builder setMerchantName(@Nullable String setterArg) {
        this.merchantName = setterArg;
        return this;
      }

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String rrn;

      public @NonNull Builder setRrn(@Nullable String setterArg) {
        this.rrn = setterArg;
        return this;
      }

      private @Nullable String stan;

      public @NonNull Builder setStan(@Nullable String setterArg) {
        this.stan = setterArg;
        return this;
      }

      private @Nullable String terminalId;

      public @NonNull Builder setTerminalId(@Nullable String setterArg) {
        this.terminalId = setterArg;
        return this;
      }

      private @Nullable String transactionType;

      public @NonNull Builder setTransactionType(@Nullable String setterArg) {
        this.transactionType = setterArg;
        return this;
      }

      private @Nullable Boolean isSuccessful;

      public @NonNull Builder setIsSuccessful(@Nullable Boolean setterArg) {
        this.isSuccessful = setterArg;
        return this;
      }

      public @NonNull TransactionDataResponse build() {
        TransactionDataResponse pigeonReturn = new TransactionDataResponse();
        pigeonReturn.setAmount(amount);
        pigeonReturn.setDeviceState(deviceState);
        pigeonReturn.setAuthorizationCode(authorizationCode);
        pigeonReturn.setCardExpiryDate(cardExpiryDate);
        pigeonReturn.setCardHolderName(cardHolderName);
        pigeonReturn.setDate(date);
        pigeonReturn.setMaskedPan(maskedPan);
        pigeonReturn.setMerchantId(merchantId);
        pigeonReturn.setMerchantName(merchantName);
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setRrn(rrn);
        pigeonReturn.setStan(stan);
        pigeonReturn.setTerminalId(terminalId);
        pigeonReturn.setTransactionType(transactionType);
        pigeonReturn.setIsSuccessful(isSuccessful);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(16);
      toListResult.add(amount);
      toListResult.add(deviceState);
      toListResult.add(authorizationCode);
      toListResult.add(cardExpiryDate);
      toListResult.add(cardHolderName);
      toListResult.add(date);
      toListResult.add(maskedPan);
      toListResult.add(merchantId);
      toListResult.add(merchantName);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(rrn);
      toListResult.add(stan);
      toListResult.add(terminalId);
      toListResult.add(transactionType);
      toListResult.add(isSuccessful);
      return toListResult;
    }

    static @NonNull TransactionDataResponse fromList(@NonNull ArrayList<Object> list) {
      TransactionDataResponse pigeonResult = new TransactionDataResponse();
      Object amount = list.get(0);
      pigeonResult.setAmount((String) amount);
      Object deviceState = list.get(1);
      pigeonResult.setDeviceState((String) deviceState);
      Object authorizationCode = list.get(2);
      pigeonResult.setAuthorizationCode((String) authorizationCode);
      Object cardExpiryDate = list.get(3);
      pigeonResult.setCardExpiryDate((String) cardExpiryDate);
      Object cardHolderName = list.get(4);
      pigeonResult.setCardHolderName((String) cardHolderName);
      Object date = list.get(5);
      pigeonResult.setDate((String) date);
      Object maskedPan = list.get(6);
      pigeonResult.setMaskedPan((String) maskedPan);
      Object merchantId = list.get(7);
      pigeonResult.setMerchantId((String) merchantId);
      Object merchantName = list.get(8);
      pigeonResult.setMerchantName((String) merchantName);
      Object responseCode = list.get(9);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(10);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object rrn = list.get(11);
      pigeonResult.setRrn((String) rrn);
      Object stan = list.get(12);
      pigeonResult.setStan((String) stan);
      Object terminalId = list.get(13);
      pigeonResult.setTerminalId((String) terminalId);
      Object transactionType = list.get(14);
      pigeonResult.setTransactionType((String) transactionType);
      Object isSuccessful = list.get(15);
      pigeonResult.setIsSuccessful((Boolean) isSuccessful);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CardDetails {
    private @Nullable String primaryAccountNumber;

    public @Nullable String getPrimaryAccountNumber() {
      return primaryAccountNumber;
    }

    public void setPrimaryAccountNumber(@Nullable String setterArg) {
      this.primaryAccountNumber = setterArg;
    }

    private @Nullable String track1;

    public @Nullable String getTrack1() {
      return track1;
    }

    public void setTrack1(@Nullable String setterArg) {
      this.track1 = setterArg;
    }

    private @Nullable String track2;

    public @Nullable String getTrack2() {
      return track2;
    }

    public void setTrack2(@Nullable String setterArg) {
      this.track2 = setterArg;
    }

    private @Nullable String expiryDate;

    public @Nullable String getExpiryDate() {
      return expiryDate;
    }

    public void setExpiryDate(@Nullable String setterArg) {
      this.expiryDate = setterArg;
    }

    private @Nullable String serviceCode;

    public @Nullable String getServiceCode() {
      return serviceCode;
    }

    public void setServiceCode(@Nullable String setterArg) {
      this.serviceCode = setterArg;
    }

    private @Nullable String iccCardData;

    public @Nullable String getIccCardData() {
      return iccCardData;
    }

    public void setIccCardData(@Nullable String setterArg) {
      this.iccCardData = setterArg;
    }

    private @Nullable String cardSequenceNumber;

    public @Nullable String getCardSequenceNumber() {
      return cardSequenceNumber;
    }

    public void setCardSequenceNumber(@Nullable String setterArg) {
      this.cardSequenceNumber = setterArg;
    }

    private @Nullable String pinBlock;

    public @Nullable String getPinBlock() {
      return pinBlock;
    }

    public void setPinBlock(@Nullable String setterArg) {
      this.pinBlock = setterArg;
    }

    private @Nullable String cardSlotTypeEnum;

    public @Nullable String getCardSlotTypeEnum() {
      return cardSlotTypeEnum;
    }

    public void setCardSlotTypeEnum(@Nullable String setterArg) {
      this.cardSlotTypeEnum = setterArg;
    }

    private @Nullable String cardHolderName;

    public @Nullable String getCardHolderName() {
      return cardHolderName;
    }

    public void setCardHolderName(@Nullable String setterArg) {
      this.cardHolderName = setterArg;
    }

    public static final class Builder {

      private @Nullable String primaryAccountNumber;

      public @NonNull Builder setPrimaryAccountNumber(@Nullable String setterArg) {
        this.primaryAccountNumber = setterArg;
        return this;
      }

      private @Nullable String track1;

      public @NonNull Builder setTrack1(@Nullable String setterArg) {
        this.track1 = setterArg;
        return this;
      }

      private @Nullable String track2;

      public @NonNull Builder setTrack2(@Nullable String setterArg) {
        this.track2 = setterArg;
        return this;
      }

      private @Nullable String expiryDate;

      public @NonNull Builder setExpiryDate(@Nullable String setterArg) {
        this.expiryDate = setterArg;
        return this;
      }

      private @Nullable String serviceCode;

      public @NonNull Builder setServiceCode(@Nullable String setterArg) {
        this.serviceCode = setterArg;
        return this;
      }

      private @Nullable String iccCardData;

      public @NonNull Builder setIccCardData(@Nullable String setterArg) {
        this.iccCardData = setterArg;
        return this;
      }

      private @Nullable String cardSequenceNumber;

      public @NonNull Builder setCardSequenceNumber(@Nullable String setterArg) {
        this.cardSequenceNumber = setterArg;
        return this;
      }

      private @Nullable String pinBlock;

      public @NonNull Builder setPinBlock(@Nullable String setterArg) {
        this.pinBlock = setterArg;
        return this;
      }

      private @Nullable String cardSlotTypeEnum;

      public @NonNull Builder setCardSlotTypeEnum(@Nullable String setterArg) {
        this.cardSlotTypeEnum = setterArg;
        return this;
      }

      private @Nullable String cardHolderName;

      public @NonNull Builder setCardHolderName(@Nullable String setterArg) {
        this.cardHolderName = setterArg;
        return this;
      }

      public @NonNull CardDetails build() {
        CardDetails pigeonReturn = new CardDetails();
        pigeonReturn.setPrimaryAccountNumber(primaryAccountNumber);
        pigeonReturn.setTrack1(track1);
        pigeonReturn.setTrack2(track2);
        pigeonReturn.setExpiryDate(expiryDate);
        pigeonReturn.setServiceCode(serviceCode);
        pigeonReturn.setIccCardData(iccCardData);
        pigeonReturn.setCardSequenceNumber(cardSequenceNumber);
        pigeonReturn.setPinBlock(pinBlock);
        pigeonReturn.setCardSlotTypeEnum(cardSlotTypeEnum);
        pigeonReturn.setCardHolderName(cardHolderName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(primaryAccountNumber);
      toListResult.add(track1);
      toListResult.add(track2);
      toListResult.add(expiryDate);
      toListResult.add(serviceCode);
      toListResult.add(iccCardData);
      toListResult.add(cardSequenceNumber);
      toListResult.add(pinBlock);
      toListResult.add(cardSlotTypeEnum);
      toListResult.add(cardHolderName);
      return toListResult;
    }

    static @NonNull CardDetails fromList(@NonNull ArrayList<Object> list) {
      CardDetails pigeonResult = new CardDetails();
      Object primaryAccountNumber = list.get(0);
      pigeonResult.setPrimaryAccountNumber((String) primaryAccountNumber);
      Object track1 = list.get(1);
      pigeonResult.setTrack1((String) track1);
      Object track2 = list.get(2);
      pigeonResult.setTrack2((String) track2);
      Object expiryDate = list.get(3);
      pigeonResult.setExpiryDate((String) expiryDate);
      Object serviceCode = list.get(4);
      pigeonResult.setServiceCode((String) serviceCode);
      Object iccCardData = list.get(5);
      pigeonResult.setIccCardData((String) iccCardData);
      Object cardSequenceNumber = list.get(6);
      pigeonResult.setCardSequenceNumber((String) cardSequenceNumber);
      Object pinBlock = list.get(7);
      pigeonResult.setPinBlock((String) pinBlock);
      Object cardSlotTypeEnum = list.get(8);
      pigeonResult.setCardSlotTypeEnum((String) cardSlotTypeEnum);
      Object cardHolderName = list.get(9);
      pigeonResult.setCardHolderName((String) cardHolderName);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class LibertyEmvApiCodec extends StandardMessageCodec {
    public static final LibertyEmvApiCodec INSTANCE = new LibertyEmvApiCodec();

    private LibertyEmvApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CardDetails.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return TransactionDataResponse.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CardDetails) {
        stream.write(128);
        writeValue(stream, ((CardDetails) value).toList());
      } else if (value instanceof TransactionDataResponse) {
        stream.write(129);
        writeValue(stream, ((TransactionDataResponse) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface LibertyEmvApi {

    void initialise(@NonNull Environment environment, @NonNull Result<TransactionDataResponse> result);

    void enquireBalance(@NonNull Boolean isOfflineTransaction, @NonNull AccountType accountType, @NonNull String rrn, @NonNull Result<TransactionDataResponse> result);

    void purchase(@NonNull Double amount, @NonNull AccountType accountType, @NonNull String rrn, @NonNull Result<TransactionDataResponse> result);

    void performKeyExchange(@NonNull Result<TransactionDataResponse> result);

    void print(@NonNull byte[] bitmap, @NonNull Result<TransactionDataResponse> result);

    void getCardDetails(@NonNull Result<CardDetails> result);

    void getSerialNo(@NonNull Result<String> result);

    void launchAppStore();

    /** The codec used by LibertyEmvApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return LibertyEmvApiCodec.INSTANCE;
    }
    /**Sets up an instance of `LibertyEmvApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable LibertyEmvApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.initialise", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Environment environmentArg = args.get(0) == null ? null : Environment.values()[(int) args.get(0)];
                Result<TransactionDataResponse> resultCallback =
                    new Result<TransactionDataResponse>() {
                      public void success(TransactionDataResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.initialise(environmentArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.enquireBalance", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean isOfflineTransactionArg = (Boolean) args.get(0);
                AccountType accountTypeArg = args.get(1) == null ? null : AccountType.values()[(int) args.get(1)];
                String rrnArg = (String) args.get(2);
                Result<TransactionDataResponse> resultCallback =
                    new Result<TransactionDataResponse>() {
                      public void success(TransactionDataResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.enquireBalance(isOfflineTransactionArg, accountTypeArg, rrnArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.purchase", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double amountArg = (Double) args.get(0);
                AccountType accountTypeArg = args.get(1) == null ? null : AccountType.values()[(int) args.get(1)];
                String rrnArg = (String) args.get(2);
                Result<TransactionDataResponse> resultCallback =
                    new Result<TransactionDataResponse>() {
                      public void success(TransactionDataResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.purchase(amountArg, accountTypeArg, rrnArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.performKeyExchange", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<TransactionDataResponse> resultCallback =
                    new Result<TransactionDataResponse>() {
                      public void success(TransactionDataResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.performKeyExchange(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.print", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] bitmapArg = (byte[]) args.get(0);
                Result<TransactionDataResponse> resultCallback =
                    new Result<TransactionDataResponse>() {
                      public void success(TransactionDataResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.print(bitmapArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.getCardDetails", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<CardDetails> resultCallback =
                    new Result<CardDetails>() {
                      public void success(CardDetails result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCardDetails(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.getSerialNo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getSerialNo(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibertyEmvApi.launchAppStore", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.launchAppStore();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
