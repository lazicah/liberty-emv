// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum AccountType {
  defaultUnspecified,
  savings,
  current,
  credit,
  universal,
  investment,
}

enum Environment {
  live,
  test,
}

class KeyExchangeResponse {
  KeyExchangeResponse({
    this.deviceState,
    this.isSuccessful,
    this.responseData,
  });

  String? deviceState;

  bool? isSuccessful;

  Map<String?, String?>? responseData;

  Object encode() {
    return <Object?>[
      deviceState,
      isSuccessful,
      responseData,
    ];
  }

  static KeyExchangeResponse decode(Object result) {
    result as List<Object?>;
    return KeyExchangeResponse(
      deviceState: result[0] as String?,
      isSuccessful: result[1] as bool?,
      responseData: (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class TransactionDataResponse {
  TransactionDataResponse({
    this.amount,
    this.deviceState,
    this.authorizationCode,
    this.cardExpiryDate,
    this.cardHolderName,
    this.date,
    this.maskedPan,
    this.merchantId,
    this.merchantName,
    this.responseCode,
    this.responseMessage,
    this.rrn,
    this.stan,
    this.terminalId,
    this.transactionType,
  });

  String? amount;

  String? deviceState;

  String? authorizationCode;

  String? cardExpiryDate;

  String? cardHolderName;

  String? date;

  String? maskedPan;

  String? merchantId;

  String? merchantName;

  String? responseCode;

  String? responseMessage;

  String? rrn;

  String? stan;

  String? terminalId;

  String? transactionType;

  Object encode() {
    return <Object?>[
      amount,
      deviceState,
      authorizationCode,
      cardExpiryDate,
      cardHolderName,
      date,
      maskedPan,
      merchantId,
      merchantName,
      responseCode,
      responseMessage,
      rrn,
      stan,
      terminalId,
      transactionType,
    ];
  }

  static TransactionDataResponse decode(Object result) {
    result as List<Object?>;
    return TransactionDataResponse(
      amount: result[0] as String?,
      deviceState: result[1] as String?,
      authorizationCode: result[2] as String?,
      cardExpiryDate: result[3] as String?,
      cardHolderName: result[4] as String?,
      date: result[5] as String?,
      maskedPan: result[6] as String?,
      merchantId: result[7] as String?,
      merchantName: result[8] as String?,
      responseCode: result[9] as String?,
      responseMessage: result[10] as String?,
      rrn: result[11] as String?,
      stan: result[12] as String?,
      terminalId: result[13] as String?,
      transactionType: result[14] as String?,
    );
  }
}

class _LibertyEmvApiCodec extends StandardMessageCodec {
  const _LibertyEmvApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is KeyExchangeResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is TransactionDataResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return KeyExchangeResponse.decode(readValue(buffer)!);
      case 129: 
        return TransactionDataResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class LibertyEmvApi {
  /// Constructor for [LibertyEmvApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  LibertyEmvApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _LibertyEmvApiCodec();

  Future<void> initialise(Environment arg_environment) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LibertyEmvApi.initialise', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_environment.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<TransactionDataResponse?> enquireBalance(bool arg_isOfflineTransaction, AccountType arg_accountType, String arg_rrn) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LibertyEmvApi.enquireBalance', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_isOfflineTransaction, arg_accountType.index, arg_rrn]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as TransactionDataResponse?);
    }
  }

  Future<TransactionDataResponse?> purchase(String arg_amount, AccountType arg_accountType, String arg_rrn) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LibertyEmvApi.purchase', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_amount, arg_accountType.index, arg_rrn]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as TransactionDataResponse?);
    }
  }

  Future<KeyExchangeResponse?> performKeyExchange() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LibertyEmvApi.performKeyExchange', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as KeyExchangeResponse?);
    }
  }

  Future<void> print(Uint8List arg_bitmap) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LibertyEmvApi.print', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_bitmap]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
